Name Strings

    VK_CHROMIUM_dma_buf_image_import

Extension Type

    Device Extension

Registered Extension Number

    Draft

Status

    Draft

Version

    0 (Early Draft)

Last Modified Date

    See git log.

IP Status

    No known IP claims.

Dependencies

    This extension is written against the Vulkan 1.0.32 specification [1].
    Requires VK_CHROMIUM_dma_buf_image_format_properties.

Contributors

    Antoine Labour, Google <piman@chromium.org>
    Chad Versace, Google <chadversary@chromium.org>
    Kristian HÃ¸gsberg Kristensen <hoegsberg@chromium.org>

Contact

    Chad Versace <chadversary@chromium.org>

Overview

    TODO

New Object Types

    None

New Enum Constants

    Extends VkStructureType
        VK_STRUCTURE_TYPE_EXTERNAL_DMA_BUF_IMAGE_IMPORT_INFO_CHROMIUM
        VK_STRUCTURE_TYPE_DMA_BUF_IMAGE_IMPORT_PLANE_INFO_CHROMIUM

New Enums

    None

New Structs

    typedef struct VkDmaBufImageImportPlaneInfoCHROMIUM {
        VkStructureType     sType;
        const void*         pNext;
        VkDeviceSize        offset;
        VkDeviceSize        rowPitch;
    } VkDmaBufImageImportPlaneInfoCHROMIUM;

    // Extends VkImageCreateInfo
    typedef struct VkDmaBufImageImportInfoCHROMIUM {
        VkStructureType                                 sType;
        const void*                                     pNext;
        uint64_t                                        drmFormatModifier;
        uint32_t                                        planeCount;
        const VkDmaBufImageImportPlaneInfoCHROMIUM*     pPlanes;
    } VkDmaBufImageImportInfoCHROMIUM;

New Functions

    None

Description

    TODO:
        - Discuss usage.
        - Define semantics of acquire/release ownership transitions for external images.
        - Discuss suggested usage of semaphores and image memory barriers
          during ownership transitions.
        - Discuss relationship to VK_CHROMIUM_dma_buf_memory_import.
        - Discuss relationship with external semaphores, which are not defined
          by this extension.

Issues

    0. Needed work:

        - Define semantics for acquire/release.
        - Layout transitions for acquire/release?
        - Discuss how a layered extension may define the source and target of
          acquire and release.

    1. How does the application determine valid values for VkImageCreateInfo
       that can be paired with the dma_buf-imported VkDeviceMemory?

       Proposed Solution: This topic is sufficiently complex that it lies
       outside the scope of this extension. Implementations are encouraged to
       solve this issue with layered extensions or with additional APIs and
       protocols outside Vulkan.

    2. Does this extension support importing planar formats (such as YUV)?

       RESOLVED: No. Vulkan 1.0 defines no planar VkFormat, and this extension
       is not the appropriate place to do so. Therefore, the ability to import
       images with planar formats is deferred to to future extensions.

       However, this extension permit importing multiple planes per image
       because some implementations may require multiple planes even when the
       VkFormat is non-planar. For example, an implementation may wish to
       import image metadata in a separate plane (see
       VK_IMAGE_ASPECT_METADATA_BIT).

    3. Should VkDmaBufImageImportInfoCHROMIUM define a single DRM format
       modifier for the entire imported image? Or define one per imported
       plane?

       UNRESOLVED: Discussion is needed. As precedent, though, both
       EGL_EXT_dma_buf_image_import_modifiers and KMS require a modifier per
       plane. However, some developers feel that design was a mistake.

References

    [1]: https://github.com/KhronosGroup/Vulkan-Docs/tree/v1.0-core-20161025

Version History

    See git log.
