Name Strings

    VK_CHROMIUM_external_drm_image

Extension Type

    Device Extension

Registered Extension Number

    Draft

Status

    Draft

Version

    0 (Early Draft)

Last Modified Date

    See git log.

IP Status

    No known IP claims.

Dependencies

    This extension is written against the Vulkan 1.0.32 specification [1].
    Requires VK_CHROMIUM_image_format_properties2

Contributors

    Antoine Labour, Google <piman@chromium.org>
    Chad Versace, Google <chadversary@chromium.org>
    Kristian Høgsberg Kristensen <hoegsberg@chromium.org>

Contact

    Chad Versace <chadversary@chromium.org>

Overview

    TODO

New Object Types

    None

New Enum Constants

    Extends VkStructureType
        VK_STRUCTURE_TYPE_EXTERNAL_DRM_IMAGE_FORMAT_PROPERTIES_CHROMIUM
        VK_STRUCTURE_TYPE_EXTERNAL_DRM_IMAGE_CREATE_INFO_CHROMIUM

    Extends VkImageTiling
        VK_IMAGE_TILING_EXTERNAL_DRM_CHROMIUM

    Extends VkImageLayout
        VK_IMAGE_LAYOUT_EXTERNAL_DRM_CHROMIUM

    Extends VkAccessFlagBits
        VK_ACCESS_EXTERNAL_DRM_CHROMIUM

New Enums

    None

New Structs

    // Extends VkImageFormatProperties2CHROMIUM
    typedef struct VkExternalDrmImageFormatPropertiesCHROMIUM {
        VkStructureType     sType;
        void*               pNext;
        uint32_t            drmFormatModifierCount;
        uint64_t*           pDrmFormatModifiers;
    } VkExternalDrmImageFormatPropertiesCHROMIUM;

    // Extends VkImageCreateInfo
    typedef struct VkExternalDrmImageCreateInfoCHROMIUM {
        VkStructureType     sType;
        const void*         pNext;
        uint64_t            drmFormatModifier;
    } VkExternalDrmImageCreateInfoCHROMIUM;

New Functions

    None

Description

    TODO:
        - Discuss usage.
        - Define semantics of acquire/release ownership transitions for external images.
        - Discuss suggested usage of semaphores and image memory barriers
          during ownership transitions.
        - Discuss relationship to VK_CHROMIUM_dma_buf_memory_import.
        - Discuss relationship with external semaphores, which are not defined
          by this extension.

Issues

    0. Needed work:

        - Define semantics for acquire/release.
        - Layout transitions for acquire/release?
        - Discuss how a layered extension may define the source and target of
          acquire and release.

    1. How does the application determine valid values for VkImageCreateInfo
       that can be paired with the dma_buf-imported VkDeviceMemory?

       Proposed Solution: This topic is sufficiently complex that it lies
       outside the scope of this extension. Implementations are encouraged to
       solve this issue with layered extensions or with additional APIs and
       protocols outside Vulkan.

    2. What about planar formats?

       Proposed Solution: Defer it to a future extension.

    3. How does the user determine which physical devices and queue families
       are capable of acquiring and releasing ownership of specific external
       images and/or external image layouts?

       TBD.

       Proposed Solution: Defer it to a future extension. On systems that lack
       such an extension, permit implicitly defined system-specific behavior.

    4. Should this extension be split into a separate instance extension and
       device extension?

       BACKGROUND: The Vulkan 1.0.32 spec, however, recommends this extension
       be split.  From the Vulkan 1.0.32 spec:

           For a set of global functionality that provides new instance-level
           and device-level commands, and can be enabled for a subset of
           devices, it is recommended that the functionality be partitioned
           across two extensions—one for the instance-level functionality, and
           one for the device-specific functionality. In this latter case, it
           is generally recommended that the two extensions have unique names.

       UNRESOLVED: Even though the Vulkan spec recommends splitting this
       extension, a split results in two very awkward, seemingly incomplete
       extensions.  The features exposed here are most naturally expressed as
       a single extension. Therefore, for convenience, now let's keep this as
       a single spec for now and revisit this issue before finalizing the
       extension spec.

References

    [1]: https://github.com/KhronosGroup/Vulkan-Docs/tree/v1.0-core-20161025

Version History

    See git log.
